name: Encrypted Base64 Secret Transfer

on:
  workflow_dispatch:
    inputs:
      secret_token:
        description: 'Sensitive token input'
        type: string
        required: true

      secret_txt:
        description: 'Sensitive text input'
        type: string
        required: true

      secret_pass:
        description: 'Sensitive pass input'
        type: string
        required: true

jobs:
  encrypt-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Encrypt secrets and save to file
        shell: bash
        run: |
          SECRET_TOKEN=$(jq -r '.inputs.secret_token' "$GITHUB_EVENT_PATH")
          SECRET_TEXT=$(jq -r '.inputs.secret_txt' "$GITHUB_EVENT_PATH")
          SECRET_PASS=$(jq -r '.inputs.secret_pass' "$GITHUB_EVENT_PATH")
          echo "::add-mask::$SECRET_TOKEN"
          echo "::add-mask::$SECRET_TEXT"

          # Function: Encrypt and encode
          enc() {
            printf "%s" "$1" | openssl enc -aes-256-cbc -pbkdf2 -salt -pass pass:"$SECRET_PASS" | base64 -w 0
          }

          echo "TOKEN=$(enc "$SECRET_TOKEN")" >> encrypted.env
          echo "TXT=$(enc "$SECRET_TEXT")" >> encrypted.env

      - uses: actions/upload-artifact@v4
        with:
          name: encrypted-secrets
          path: encrypted.env

  decrypt-secrets:
    needs: encrypt-secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: encrypted-secrets

      - name: Decrypt secrets from file
        shell: bash
        run: |
          SECRET_PASS=$(jq -r '.inputs.secret_pass' "$GITHUB_EVENT_PATH")
          > decrypted.env

          while IFS= read -r line; do
            [[ -z "$line" ]] && continue

            key="${line%%=*}"
            value="${line#*=}"

            if [[ -n "$key" && -n "$value" ]]; then
              # Decrypt using OpenSSL with decoded binary
              decrypted=$(echo "$value" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -d -salt -pass pass:"$SECRET_PASS" 2>/dev/null)

              if [[ $? -ne 0 ]]; then
                echo "❌ Failed to decrypt $key"
              else
                echo "$key=$decrypted" >> decrypted.env
                echo "::add-mask::$decrypted"
                echo "✅ Decrypted $key"
              fi
            fi
          done < encrypted.env

          echo "✅ Final decrypted content:"
          cat decrypted.env




# jobs:
#   # Job 1: Read a secret and encrypt
#   github-secrets:
#     runs-on: ubuntu-latest
#     name: A Job to read a secret
#     steps:
#       - id: read-secret
#         shell: bash
#         run: |
#           SECRET_TOKEN=$(jq -r '.inputs.secret_token' "$GITHUB_EVENT_PATH")
#           SECRET_PASS=$(jq -r '.inputs.secret_pass' "$GITHUB_EVENT_PATH")
#           echo "::add-mask::$SECRET_TOKEN"
#           echo "$SECRET_PASS"
          
#           BINARY_ENCRYPTED_TOKEN=$(echo -n "$SECRET_TOKEN" | openssl enc -aes-256-cbc -pbkdf2 -salt -k "$SECRET_PASS");
#           ENCRYPTED_TOKEN=$(echo -n "$BINARY_ENCRYPTED_TOKEN" | base64);
#           echo "our-token=$ENCRYPTED_TOKEN" >> $GITHUB_OUTPUT
#     outputs:
#       read-token: ${{ steps.read-secret.outputs.our-token }}

#   # Job 2: Use secret
#   use-secret:
#     needs: github-secrets
#     runs-on: ubuntu-latest
#     name: A Job to use secret
#     steps:
#     # Step 1: Decrypt the token using OpenSSL
#     - id: decrypt-token
#       shell: bash
#       run: |
#         SECRET_PASS=$(jq -r '.inputs.secret_pass' "$GITHUB_EVENT_PATH")
#         # echo "::add-mask::$SECRET_PASS"
        
#         ENCRYPTED_TOKEN=${{ needs.github-secrets.outputs.read-token }};
#         BINARY_ENCRYPTED_TOKEN=$(echo -n "$ENCRYPTED_TOKEN" | base64 --decode);
#         OUR_TOKEN=$(echo -n "$BINARY_ENCRYPTED_TOKEN" | openssl enc -aes-256-cbc -pbkdf2 -d -salt -k "$SECRET_PASS");
#         echo "our-token=$OUR_TOKEN" >> $GITHUB_OUTPUT

#     # Step 2: Print out our secret
#     - id: print-secret
#       shell: bash
#       run: echo "our-token:${{ steps.decrypt-token.outputs.our-token }}"

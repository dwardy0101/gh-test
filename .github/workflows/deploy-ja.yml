on:
  workflow_dispatch:
   inputs:
    deploygate-token:
     description: 'your deploygate token'
     type: string
     required: true
     default: 'none'
     
    deploygate-name: 
     description: 'your deploygate name'
     type: string
     required: true
     default: 'none'

    distribution-name: 
     description: 'distribution to replace/delete'
     type: string
     required: true
     default: 'none'
     
    target-branch: 
     description: 'your target branch'
     type: string
     required: true
     default: 'deploy/ja'

jobs:
  verify-inputs:
   runs-on: ubuntu-latest
   steps:
    - name: Check inputs
      run: |
        SECRET_DTOKEN=$(jq -r '.inputs["deploygate-token"]' "$GITHUB_EVENT_PATH")
        SECRET_DOWNER=$(jq -r '.inputs["deploygate-name"]' "$GITHUB_EVENT_PATH")
        
        echo "::add-mask::$SECRET_DTOKEN"
        echo "::add-mask::$SECRET_DOWNER"

        # Function: Encrypt and encode
        enc() {
          printf "%s" "$1" | openssl enc -aes-256-cbc -pbkdf2 -salt -pass pass:"${{ secrets.SECRET_PASSKEY }}" | base64 -w 0
        }
          
        echo "Checking inputs..."
        if [[ "$DTOKEN" == "none" || "$DOWNER" == "none" ]]; then
          echo "🚫 Invalid inputs. Exiting workflow."
          exit 1
        else
          echo "✅ Inputs are valid."
          echo "TOKEN=$(enc "$SECRET_DTOKEN")" >> encrypted.env
          echo "OWNER=$(enc "$SECRET_DOWNER")" >> encrypted.env
        fi

    - uses: actions/upload-artifact@v4
      with:
        name: encrypted-secrets
        path: encrypted.env
        
      
  ########################
  # NATIVECAMP FLUTTER
  ########################
  build-aar:
    needs: verify-inputs
    if: ${{ needs.verify-inputs.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Flutter Module
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-FlutterModule
          path: NativeCamp-FlutterModule
          token: ${{ secrets.MY_PAT }}

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Flutter pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Install Flutter dependencies
        working-directory: NativeCamp-FlutterModule
        run: flutter pub get

      - name: Generate Flutter AAR source hash
        id: flutter_hash
        working-directory: NativeCamp-FlutterModule
        run: |
          HASH=$(find . -type f \( -name "*.dart" -o -name "pubspec.yaml" \) -exec md5sum {} + | sort | md5sum | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Restore AAR cache
        id: aar_cache
        uses: actions/cache@v4
        with:
          path: NativeCamp-FlutterModule/build/host/outputs/repo/
          key: flutter-aar-${{ steps.flutter_hash.outputs.hash }}

      - name: Build Flutter AAR (only if not cached)
        if: steps.aar_cache.outputs.cache-hit != 'true'
        working-directory: NativeCamp-FlutterModule
        run: flutter build aar

      - name: Set AAR_READY env based on file presence
        if: success()
        run: |
          AAR_PATH="NativeCamp-FlutterModule/build/host/outputs/repo/net/nativecamp/nativecamp/flutter_release/1.0/flutter_release-1.0.aar"

          if [ -f "$AAR_PATH" ]; then
            echo "✅ AAR exists at $AAR_PATH"
            echo "AAR_READY=true" >> $GITHUB_ENV
          else
            echo "❌ AAR not found."
            echo "AAR_READY=false" >> $GITHUB_ENV
          fi

      - name: Upload AAR artifact
        if: env.AAR_READY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

  ########################
  # NATIVECAMP ANDROID
  ########################
  build-deploy-apk:
    needs: build-aar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Android Project
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-Android
          path: NativeCamp-Android
          token: ${{ secrets.MY_PAT }}
          ref: ${{ github.event.inputs.target-branch }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Download AAR artifact
        uses: actions/download-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        working-directory: NativeCamp-Android
        run: chmod +x gradlew

      - name: Build a debug APK
        working-directory: NativeCamp-Android
        run: |
           ./gradlew assembleDebug

      - name: Prepare Upload APK
        run: |
          APK_PATH="NativeCamp-Android/app/build/outputs/apk/debug/app-debug.apk"
          echo "Using APK path: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: ${{ env.APK_PATH }}

      - uses: actions/download-artifact@v4
        with:
          name: encrypted-secrets

      - name: Decrypt secrets
        env:
          SECRET_PASS: ${{ secrets.SECRET_PASSKEY }}
        shell: bash
        run: |
          while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            key="${line%%=*}"
            value="${line#*=}"
            if [[ -n "$key" && -n "$value" ]]; then
              # Decrypt using OpenSSL with decoded binary
              decrypted=$(echo "$value" | base64 -d | openssl enc -aes-256-cbc -pbkdf2 -d -salt -pass pass:"$SECRET_PASS" 2>/dev/null)
              if [[ $? -ne 0 ]]; then
                echo "❌ Failed to decrypt $key"
                exit 1
              else
                echo "$key=$decrypted" >> $GITHUB_ENV
                echo "::add-mask::$decrypted"
                echo "✅ Decrypted $key"
              fi
            fi
          done < encrypted.env


      - name: Fetch Distribution Title and Delete DeployGate Distribution
        continue-on-error: true
        env:
          PLATFORM_TYPE: android
          APP_ID: com.ja.nativecamp.nativecamp
          DIST_NAME_TO_DELETE: ${{ github.event.inputs.distribution-name }}
        run: |
          echo "Fetching current distributions..."
      
          # Step 1: Fetch distributions
          RESPONSE=$(curl --silent --show-error --fail \
            --url "https://deploygate.com/api/users/${OWNER}/platforms/${PLATFORM_TYPE}/apps/${APP_ID}/distributions" \
            -H "Authorization: Bearer ${TOKEN}")
      
          COUNT=$(echo "$RESPONSE" | jq '.results.distributions | length')
      
          echo "📦 Found $COUNT distribution(s)"
      
          # Step 2: Only proceed if exactly 2 distributions exist
          if [ "$COUNT" -ne 2 ]; then
            echo "🛑 Not exactly 2 distributions — skipping deletion."
            exit 0
          fi
      
          # Step 3: Determine which distribution to delete
          if [ "$DIST_NAME_TO_DELETE" = "none" ]; then
            DISTRIBUTION_NAME=$(echo "$RESPONSE" | jq -r '.results.distributions[0].title')
            echo "🧠 'none' specified — deleting the first distribution: '$DISTRIBUTION_NAME'"
          elif [ -n "$DIST_NAME_TO_DELETE" ] && [ "$DIST_NAME_TO_DELETE" != "null" ]; then
            DISTRIBUTION_NAME="$DIST_NAME_TO_DELETE"
            echo "🔧 Using manually specified distribution to delete: '$DISTRIBUTION_NAME'"
          else
            echo "❌ Invalid distribution name input — aborting delete."
            exit 0
          fi
      
          if [ -z "$DISTRIBUTION_NAME" ] || [ "$DISTRIBUTION_NAME" = "null" ]; then
            echo "❌ Failed to resolve a valid distribution name. Aborting delete."
            exit 0
          fi
      
          # Step 4: Delete the chosen distribution
          echo "🗑️ Deleting distribution: '$DISTRIBUTION_NAME'"
          DELETE_RESPONSE=$(curl --silent --show-error --fail -X DELETE \
            --url "https://deploygate.com/api/users/${OWNER}/platforms/${PLATFORM_TYPE}/apps/${APP_ID}/distributions" \
            -H "Authorization: Bearer ${TOKEN}" \
            --form-string "distribution_name=${DISTRIBUTION_NAME}")
      
          echo "✅ DeployGate DELETE Response: $DELETE_RESPONSE"


      - name: Upload APK to DeployGate
        id: deploygate
        uses: DeployGate/deploygate-upload-github-action@v1.1.0
        with:
          api_token: ${{ env.TOKEN }}
          owner_name: ${{ env.OWNER }}
          file_path: ${{ env.APK_PATH }} #NativeCamp-Android/app/build/outputs/apk/dev1Google/debug/app-dev1-google-debug.apk
          message: |
            ${{ github.event.inputs.target-branch }}

          distribution_name: "${{ github.event.inputs.target-branch }}"
          release_note: |
            Repository: "https://github.com/VJSOL/NativeCamp-Android"
            Branch: ${{ github.event.inputs.target-branch }}

      - name: Print Results
        working-directory: NativeCamp-Android
        run: |
          # Access the entire results object
          echo '${{ toJSON(steps.deploygate.outputs.results) }}' > output.json
          cat output.json | jq
          
          # Access specific values using fromJSON
          echo "App name: ${{ fromJSON(steps.deploygate.outputs.results).name }}"
          echo "Package name: ${{ fromJSON(steps.deploygate.outputs.results).package_name }}"
          echo "Download URL: ${{ fromJSON(steps.deploygate.outputs.results).file }}"

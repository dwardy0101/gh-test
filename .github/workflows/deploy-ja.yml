on:
  workflow_dispatch:
   inputs:
    deploygate-token:
     description: 'your deploygate token'
     type: string
     required: true
     default: 'none'
     
    deploygate-name: 
     description: 'your deploygate name'
     type: string
     required: true
     default: 'none'

    # upload-name: 
    #  description: 'clickable build-link (distribution name)'
    #  type: string
    #  required: true
    #  default: 'my-build'
     
    target-branch: 
     description: 'your target branch'
     type: string
     required: true
     default: 'deploy/ja'

jobs:
  verify-inputs:
   runs-on: ubuntu-latest
   steps:
    - name: Check inputs
      run: |
        
        TOKEN="${{ github.event.inputs.deploygate-token }}"
        OWNER="${{ github.event.inputs.deploygate-name }}"
        
        echo "::add-mask::$TOKEN"
        echo "::add-mask::$OWNER"
        
        echo "Checking inputs..."
        if [[ "$TOKEN" == "none" || "$OWNER" == "none" ]]; then
          echo "🚫 Invalid inputs. Exiting workflow."
          exit 1
        else
          echo "✅ Inputs are valid."
        fi
        
      
  ########################
  # NATIVECAMP FLUTTER
  ########################
  build-aar:
    needs: verify-inputs
    if: ${{ needs.verify-inputs.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Flutter Module
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-FlutterModule
          path: NativeCamp-FlutterModule
          token: ${{ secrets.MY_PAT }}

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Flutter pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Install Flutter dependencies
        working-directory: NativeCamp-FlutterModule
        run: flutter pub get

      - name: Generate Flutter AAR source hash
        id: flutter_hash
        working-directory: NativeCamp-FlutterModule
        run: |
          HASH=$(find . -type f \( -name "*.dart" -o -name "pubspec.yaml" \) -exec md5sum {} + | sort | md5sum | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Restore AAR cache
        id: aar_cache
        uses: actions/cache@v4
        with:
          path: NativeCamp-FlutterModule/build/host/outputs/repo/
          key: flutter-aar-${{ steps.flutter_hash.outputs.hash }}

      - name: Build Flutter AAR (only if not cached)
        if: steps.aar_cache.outputs.cache-hit != 'true'
        working-directory: NativeCamp-FlutterModule
        run: flutter build aar

      - name: Set AAR_READY env based on file presence
        if: success()
        run: |
          AAR_PATH="NativeCamp-FlutterModule/build/host/outputs/repo/net/nativecamp/nativecamp/flutter_release/1.0/flutter_release-1.0.aar"

          if [ -f "$AAR_PATH" ]; then
            echo "✅ AAR exists at $AAR_PATH"
            echo "AAR_READY=true" >> $GITHUB_ENV
          else
            echo "❌ AAR not found."
            echo "AAR_READY=false" >> $GITHUB_ENV
          fi

      - name: Upload AAR artifact
        if: env.AAR_READY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

  ########################
  # NATIVECAMP ANDROID
  ########################
  build-deploy-apk:
    needs: build-aar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Android Project
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-Android
          path: NativeCamp-Android
          token: ${{ secrets.MY_PAT }}
          ref: ${{ github.event.inputs.target-branch }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Download AAR artifact
        uses: actions/download-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        working-directory: NativeCamp-Android
        run: chmod +x gradlew

      - name: Build a debug APK
        working-directory: NativeCamp-Android
        run: |
           ./gradlew assembleDebug

      - name: Prepare Upload APK
        run: |
          APK_PATH="NativeCamp-Android/app/build/outputs/apk/debug/app-debug.apk"
          echo "Using APK path: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: ${{ env.APK_PATH }}

      - name: Delete DeployGate Distribution
        continue-on-error: true
        env:
          TOKEN: ${{ github.event.inputs.deploygate-token }}
          OWNER_NAME: ${{ github.event.inputs.deploygate-name }}
          PLATFORM_TYPE: android
          APP_ID: com.ja.nativecamp.nativecamp
          DISTRIBUTION_NAME: "${{ github.event.inputs.target-branch }}"
        run: |
          RESPONSE=$(curl --silent --show-error --fail -X DELETE \
          --url "https://deploygate.com/api/users/${OWNER_NAME}/platforms/${PLATFORM_TYPE}/apps/${APP_ID}/distributions" \
          -H "Authorization: Bearer ${TOKEN}" \
          --form-string "distribution_name=${DISTRIBUTION_NAME}")
          echo "DeployGate Response: $RESPONSE"          

      - name: Upload APK to DeployGate
        id: deploygate
        uses: DeployGate/deploygate-upload-github-action@v1.1.0
        with:
          api_token: ${{ github.event.inputs.deploygate-token }} #${{ secrets.DEPLOYGATE_API_TOKEN }}
          owner_name: ${{ github.event.inputs.deploygate-name }} #${{ secrets.DEPLOYGATE_OWNER_NAME }}
          file_path: ${{ env.APK_PATH }} #NativeCamp-Android/app/build/outputs/apk/dev1Google/debug/app-dev1-google-debug.apk
          message: |
            ${{ github.event.inputs.target-branch }}

          distribution_name: "${{ github.event.inputs.target-branch }}"
          release_note: |
            Repository: ${{ github.repositoryUrl }}
            Branch: ${{ github.event.inputs.target-branch }}
            Commit: ${{ github.sha }}

      - name: Print Results
        working-directory: NativeCamp-Android
        run: |
          # Access the entire results object
          echo '${{ toJSON(steps.deploygate.outputs.results) }}' > output.json
          cat output.json | jq
          
          # Access specific values using fromJSON
          echo "App name: ${{ fromJSON(steps.deploygate.outputs.results).name }}"
          echo "Package name: ${{ fromJSON(steps.deploygate.outputs.results).package_name }}"
          echo "Download URL: ${{ fromJSON(steps.deploygate.outputs.results).file }}"

on:
  workflow_dispatch:

jobs:
  # verify-tag:
  #   runs-on: ubuntu-latest
  #   env:
  #     TARGET_BRANCH: master

  #   steps:
  #     - name: Checkout Android Project (tag commit)
  #       uses: actions/checkout@v4
  #       with:
  #         path: NativeCamp-Android

  #     - name: Fetch target branch
  #       working-directory: NativeCamp-Android
  #       run: git fetch origin $TARGET_BRANCH

  #     - name: Verify tag
  #       working-directory: NativeCamp-Android
  #       run: |
  #         TAG_COMMIT=$(git rev-parse ${{ github.ref_name }})
  #         echo "🔍 Tag: ${{ github.ref_name }}"
  #         echo "🔍 Tag commit: $TAG_COMMIT"
  #         echo "🔍 Comparing to branch: $TARGET_BRANCH"
          
  #         if git merge-base --is-ancestor "$TAG_COMMIT" origin/$TARGET_BRANCH; then
  #           echo "✅ Tag is based on $TARGET_BRANCH"
  #         else
  #           echo "❌ Tag is NOT based on $TARGET_BRANCH. Exiting."
  #           exit 1
  #         fi

  ########################
  # NATIVECAMP FLUTTER
  ########################
  build-aar:
    # needs: verify-tag
    runs-on: ubuntu-latest
    steps:
      # For debugging purposes, enable this code.
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     detached: true

      - name: Checkout Flutter Module
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-FlutterModule
          path: NativeCamp-FlutterModule
          token: ${{ secrets.MY_PAT }}

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Flutter pub packages
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-flutter-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-flutter-pub-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.29.3
          channel: stable

      - name: Install Flutter dependencies
        working-directory: NativeCamp-FlutterModule
        run: flutter pub get

      - name: Generate Flutter AAR source hash
        id: flutter_hash
        working-directory: NativeCamp-FlutterModule
        run: |
          HASH=$(find . -type f \( -name "*.dart" -o -name "pubspec.yaml" \) -exec md5sum {} + | sort | md5sum | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Restore AAR cache
        id: aar_cache
        uses: actions/cache@v4
        with:
          path: NativeCamp-FlutterModule/build/host/outputs/repo/
          key: flutter-aar-${{ steps.flutter_hash.outputs.hash }}

      - name: Build Flutter AAR (only if not cached)
        if: steps.aar_cache.outputs.cache-hit != 'true'
        working-directory: NativeCamp-FlutterModule
        run: flutter build aar

      - name: Set AAR_READY env based on file presence
        if: success()
        run: |
          AAR_PATH="NativeCamp-FlutterModule/build/host/outputs/repo/net/nativecamp/nativecamp/flutter_release/1.0/flutter_release-1.0.aar"

          if [ -f "$AAR_PATH" ]; then
            echo "✅ AAR exists at $AAR_PATH"
            echo "AAR_READY=true" >> $GITHUB_ENV
          else
            echo "❌ AAR not found."
            echo "AAR_READY=false" >> $GITHUB_ENV
          fi

      - name: Upload AAR artifact
        if: env.AAR_READY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

  ########################
  # NATIVECAMP ANDROID
  ########################
  build-deploy-apk:
    needs: build-aar
    runs-on: ubuntu-latest
    steps:
      # For debugging purposes, enable this code.
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      #   with:
      #     detached: true

      - name: Checkout Android Project
        uses: actions/checkout@v4
        with:
          repository: VJSOL/NativeCamp-Android
          path: NativeCamp-Android
          token: ${{ secrets.MY_PAT }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Download AAR artifact
        uses: actions/download-artifact@v4
        with:
          name: Flutter AAR artifact
          path: NativeCamp-FlutterModule/build/host/outputs/repo/

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x gradlew
        working-directory: NativeCamp-Android

      - name: Build a debug APK
        working-directory: NativeCamp-Android
        run: ./gradlew assembleDev1GoogleDebug

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: NC APK
          path: NativeCamp-Android/app/build/outputs/apk/dev1Google/debug/app-dev1-google-debug.apk

      - name: Upload APK to DeployGate
        id: deploygate
        uses: DeployGate/deploygate-upload-github-action@v1.1.0
        with:
          api_token: ${{ secrets.DEPLOYGATE_API_TOKEN }}
          owner_name: ${{ secrets.DEPLOYGATE_OWNER_NAME }}
          file_path: NativeCamp-Android/app/build/outputs/apk/dev1Google/debug/app-dev1-google-debug.apk
          message: |
            ${{ github.event.repository.name }}-${{ github.ref_name }}

          distribution_name: "${{ github.ref_name }} build"
          release_note: |
            Repository: ${{ github.repositoryUrl }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}

      - name: Print Results
        working-directory: NativeCamp-Android
        run: |
          # Access the entire results object
          echo '${{ toJSON(steps.deploygate.outputs.results) }}' > output.json
          cat output.json | jq
          
          # Access specific values using fromJSON
          echo "App name: ${{ fromJSON(steps.deploygate.outputs.results).name }}"
          echo "Package name: ${{ fromJSON(steps.deploygate.outputs.results).package_name }}"
          echo "Download URL: ${{ fromJSON(steps.deploygate.outputs.results).file }}"
